package com.tourism.assetmanagement.utils;

import com.tourism.assetmanagement.domain.asset.AssetVulnerability;
import com.tourism.assetmanagement.domain.Vulnerability;
import com.tourism.assetmanagement.model.FormDataDTO;
import com.tourism.assetmanagement.repository.asset.AssetVulnerabilityRepository;
import com.tourism.assetmanagement.repository.VulnerabilityRepository;
import com.tourism.errors.NotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
public class AssetVulnerabilityUtil extends GenericDetailUtil<Vulnerability, Vulnerability, AssetVulnerability, UUID, VulnerabilityRepository, VulnerabilityRepository, AssetVulnerabilityRepository>{

    private final VulnerabilityRepository vulnerabilityRepository;

    private final AssetVulnerabilityRepository assetVulnerabilityRepository;

    @Autowired
    public AssetVulnerabilityUtil(VulnerabilityRepository vulnerabilityRepository,
                                  AssetVulnerabilityRepository assetVulnerabilityRepository) {
        super(vulnerabilityRepository, assetVulnerabilityRepository, vulnerabilityRepository);
        this.assetVulnerabilityRepository = assetVulnerabilityRepository;
        this.vulnerabilityRepository = vulnerabilityRepository;

    }

    public FormDataDTO getVulerabilityData(UUID assetID){

        List<Object> values = assetVulnerabilityRepository.findAllByAssetId(assetID).stream().map((av) -> {
            return vulnerabilityRepository.findById(av.getVulnerabilityId()).orElseThrow(
                    () -> {
                        throw new NotFoundException(av.getVulnerabilityId());
                    }
            ).getName();
        }).collect(Collectors.toList());

        return FormDataDTO.builder().objectName("Vulnerabilidad")
                .values(values).build();

    }
}
